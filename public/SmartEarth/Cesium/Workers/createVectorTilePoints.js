define(["./AttributeCompression-5e4af6de","./Matrix2-52f9f880","./ComponentDatatype-a9820060","./createTaskProcessorWorker","./RuntimeError-ac440aa5","./defaultValue-69ee94f4","./PixelFormat-9ceadbf3","./WebGLConstants-f63312fc"],(function(e,a,t,r,n,o,i,s){"use strict";const c=32767,u=new a.Cartographic,f=new a.Cartesian3,l=new a.Rectangle,p=new a.Ellipsoid,m={min:void 0,max:void 0};return r((function(r,n){const o=new Uint16Array(r.positions);!function(e){e=new Float64Array(e);let t=0;m.min=e[t++],m.max=e[t++],a.Rectangle.unpack(e,t,l),t+=a.Rectangle.packedLength,a.Ellipsoid.unpack(e,t,p)}(r.packedBuffer);const i=l,s=p,d=m.min,h=m.max,C=o.length/3,g=o.subarray(0,C),b=o.subarray(C,2*C),w=o.subarray(2*C,3*C);e.AttributeCompression.zigZagDeltaDecode(g,b,w);const k=new Float64Array(o.length);for(let e=0;e<C;++e){const r=g[e],n=b[e],o=w[e],l=t.CesiumMath.lerp(i.west,i.east,r/c),p=t.CesiumMath.lerp(i.south,i.north,n/c),m=t.CesiumMath.lerp(d,h,o/c),C=a.Cartographic.fromRadians(l,p,m,u),y=s.cartographicToCartesian(C,f);a.Cartesian3.pack(y,k,3*e)}return n.push(k.buffer),{positions:k.buffer}}))}));
